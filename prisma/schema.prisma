generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Owner {
  id        String     @id @default(uuid()) @db.Uuid
  nickname  String
  bookmarks BookMark[]
  cares     Care[]
  comments  Comment[]
  diaries   Diary[]
  dog       Dog?
  following Follow[]   @relation("follower")
  follower  Follow[]   @relation("following")
  summaries Summary[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("owners")
}

model Dog {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  sex          String
  birthDate    DateTime
  adoptionDate DateTime
  imageKey     String
  breedId      String   @db.Uuid
  ownerId      String   @unique @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  breed        Breed    @relation(fields: [breedId], references: [id])
  owner        Owner    @relation(fields: [ownerId], references: [id])

  @@map("dogs")
}

model Breed {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int
  dogs      Dog[]

  @@map("breeds")
}

model Care {
  id         String   @id @default(uuid()) @db.Uuid
  careDate   DateTime
  amount     Float?
  memo       String?
  imageKey   String?
  ownerId    String   @db.Uuid
  careListId String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  careList   CareList @relation(fields: [careListId], references: [id])
  owner      Owner    @relation(fields: [ownerId], references: [id])

  @@map("cares")
}

model CareList {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  icon      String
  order     Int
  cares     Care[]

  @@map("care_lists")
}

model Summary {
  id          String       @id @default(uuid()) @db.Uuid
  title       String
  explanation String
  ownerId     String       @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  diaries     Diary[]
  owner       Owner        @relation(fields: [ownerId], references: [id])
  summaryTags SummaryTag[]

  @@map("summary")

}

model SummaryTag {
  id        String   @id @default(uuid()) @db.Uuid
  summaryId String   @db.Uuid
  tagId     String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  summary   Summary  @relation(fields: [summaryId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@map("summary_tags")

}

model Diary {
  id        String     @id @default(uuid()) @db.Uuid
  title     String
  content   String
  imageKey  String?
  ownerId   String     @db.Uuid
  summaryId String?    @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookmarks BookMark[]
  comments  Comment[]
  owner     Owner      @relation(fields: [ownerId], references: [id])
  summary   Summary?   @relation(fields: [summaryId], references: [id])
  diaryTags DiaryTag[]

  @@map("diaries")
}

model DiaryTag {
  id        String   @id @default(uuid()) @db.Uuid
  diaryId   String   @db.Uuid
  tagId     String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diary     Diary    @relation(fields: [diaryId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@map("diary_tags")
}

model Tag {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  diaryTags   DiaryTag[]
  summaryTags SummaryTag[]

  @@map("tags")
}

model BookMark {
  id        String   @id @default(uuid()) @db.Uuid
  ownerId   String   @db.Uuid
  diaryId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diary     Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade )
  owner     Owner    @relation(fields: [ownerId], references: [id])

  @@map("bookmarks")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  comment   String
  ownerId   String   @db.Uuid
  diaryId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diary     Diary    @relation(fields: [diaryId], references: [id])
  owner     Owner    @relation(fields: [ownerId], references: [id])

  @@map("comments")
}

model Follow {
  followerId  String   @db.Uuid
  followingId String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    Owner    @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   Owner    @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followingId, followerId])
  @@map("follows")
}