// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas  = ["auth", "public"]
}

model Owner {
  id            String      @id @default(uuid()) @db.Uuid
  nickname      String
  dog           Dog?
  cares         Care[]
  diaries       Diary[]
  summaries     Summary[]
  comments      Comment[]
  bookmarks     BookMark[]
  follower      Follow[]    @relation("following")
  following     Follow[]    @relation("follower")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("owners")
  @@schema("public")
}

model Dog {
  id            String      @id @default(uuid()) @db.Uuid
  name          String
  sex           String
  birthDate     DateTime
  adoptionDate  DateTime
  imageKey      String
  breed         Breed       @relation(fields: [breedId], references: [id])
  breedId       String      @db.Uuid
  owner         Owner       @relation(fields: [ownerId], references: [id])
  ownerId       String      @unique @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("dogs")
  @@schema("public")
}

model Breed {
  id            String   @id @default(uuid()) @db.Uuid
  name          String   @unique
  dogs          Dog[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Int
  @@map("breeds")

  @@schema("public")
}

model Care {
  id            String    @id @default(uuid()) @db.Uuid
  careDate      DateTime
  amount        Float?
  memo          String?
  imageKey      String?
  owner         Owner     @relation(fields: [ownerId], references: [id])
  ownerId       String    @db.Uuid
  careList      CareList  @relation(fields: [careListId], references: [id])
  careListId    String    @db.Uuid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("cares")
  @@schema("public")
}

model CareList {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @unique
  icon          String    
  cares         Care[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  order         Int
  
  @@map("care_lists")
  @@schema("public")
}

model Summary {
  id            String        @id @default(uuid()) @db.Uuid
  title         String
  explanation   String
  owner         Owner         @relation(fields: [ownerId], references: [id])
  ownerId       String        @db.Uuid
  diaries       Diary[]
  summaryTags   SummaryTag[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("summary")
  @@schema("public")
}

model SummaryTag {
  id            String   @id @default(uuid()) @db.Uuid
  summary       Summary  @relation(fields: [summaryId], references: [id])
  summaryId     String   @db.Uuid
  tag           Tag      @relation(fields: [tagId], references: [id])
  tagId         String   @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("summary_tags")
  @@schema("public")
}

model Diary {
  id            String      @id @default(uuid()) @db.Uuid
  title         String
  content       String
  imageKey      String?
  owner         Owner       @relation(fields: [ownerId], references: [id])
  ownerId       String      @db.Uuid
  summary       Summary?    @relation(fields: [summaryId], references: [id])
  summaryId     String?     @db.Uuid
  diaryTags     DiaryTag[]
  bookmarks     BookMark[]
  comments      Comment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("diaries")
  @@schema("public")
}

model DiaryTag {
  id            String   @id @default(uuid()) @db.Uuid
  diary         Diary    @relation(fields: [diaryId], references: [id])
  diaryId       String   @db.Uuid
  tag           Tag      @relation(fields: [tagId], references: [id])
  tagId         String   @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("diary_tags")
  @@schema("public")
}

model Tag {
  id            String        @id @default(uuid()) @db.Uuid
  name          String        @unique
  diaryTags     DiaryTag[]
  summaryTags   SummaryTag[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("tags")
  @@schema("public")
}

model BookMark {
  id            String   @id @default(uuid()) @db.Uuid
  owner         Owner    @relation(fields: [ownerId], references: [id])
  ownerId       String   @db.Uuid
  diary         Diary    @relation(fields: [diaryId], references: [id]) 
  diaryId       String   @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("bookmarks")
  @@schema("public")
}

model Comment {
  id            String   @id @default(uuid()) @db.Uuid
  comment       String
  owner         Owner    @relation(fields: [ownerId], references: [id])
  ownerId       String   @db.Uuid
  diary         Diary    @relation(fields: [diaryId], references: [id])
  diaryId       String   @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("comments")
  @@schema("public")
}

model Follow {
  follower      Owner    @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId    String   @db.Uuid
  following     Owner    @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId   String   @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@id([followingId, followerId])
  @@map("follows")
  @@schema("public")
}